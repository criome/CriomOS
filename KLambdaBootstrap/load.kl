(defun load (V1760) (let TC? (value shen.*tc*) (let Load (let Start (get-time run) (let Result (shen.load-help TC? (read-file V1760)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (pr (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if TC? (pr (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded))))

(defun shen.load-help (V1763 V1764) (cond ((= false V1763) (shen.eval-and-print V1764)) (true (shen.check-eval-and-print V1764))))

(defun shen.eval-and-print (V1765) (map (lambda Y (pr (shen.app (eval-kl (shen.shen->kl Y)) "
" shen.s) (stoutput))) V1765))

(defun shen.check-eval-and-print (V1766) (let Table (mapcan (lambda Y (shen.typetable Y)) V1766) (let Assume (trap-error (shen.assumetypes Table) (lambda E (shen.unwind-types E Table))) (trap-error (shen.work-through V1766) (lambda E (shen.unwind-types E Table))))))

(defun shen.typetable (V1771) (cond ((and (cons? V1771) (and (= define (hd V1771)) (and (cons? (tl V1771)) (and (cons? (tl (tl V1771))) (= { (hd (tl (tl V1771)))))))) (cons (hd (tl V1771)) (cons (shen.rectify-type (shen.type-F (hd (tl V1771)) (tl (tl (tl V1771))))) ()))) ((and (cons? V1771) (and (= define (hd V1771)) (cons? (tl V1771)))) (simple-error (cn "missing { in " (shen.app (hd (tl V1771)) "
" shen.a)))) (true ())))

(defun shen.type-F (V1778 V1779) (cond ((and (cons? V1779) (= } (hd V1779))) ()) ((cons? V1779) (cons (hd V1779) (shen.type-F V1778 (tl V1779)))) (true (simple-error (cn "missing } in " (shen.app V1778 "
" shen.a))))))

(defun shen.assumetypes (V1782) (cond ((= () V1782) ()) ((and (cons? V1782) (cons? (tl V1782))) (do (declare (hd V1782) (hd (tl V1782))) (shen.assumetypes (tl (tl V1782))))) (true (simple-error "implementation error in shen.assumetype"))))

(defun shen.unwind-types (V1787 V1788) (cond ((and (cons? V1788) (cons? (hd V1788))) (do (destroy (hd (hd V1788))) (shen.unwind-types V1787 (tl V1788)))) (true (simple-error (error-to-string V1787)))))

(defun shen.work-through (V1791) (cond ((= () V1791) ()) ((and (cons? V1791) (and (cons? (tl V1791)) (and (cons? (tl (tl V1791))) (= (hd (tl V1791)) (intern ":"))))) (let Check (shen.typecheck (hd V1791) (hd (tl (tl V1791)))) (if (= Check false) (shen.type-error) (let Eval (eval-kl (shen.shen->kl (hd V1791))) (let Message (pr (shen.app Eval (cn " : " (shen.app (shen.pretty-type Check) "
" shen.r)) shen.s) (stoutput)) (shen.work-through (tl (tl (tl V1791))))))))) ((cons? V1791) (shen.work-through (cons (hd V1791) (cons (intern ":") (cons A (tl V1791)))))) (true (simple-error "implementation error in shen.work-through"))))

(defun shen.pretty-type (V1793) (cond ((and (cons? V1793) (and (cons? (hd V1793)) (and (= str (hd (hd V1793))) (and (cons? (tl (hd V1793))) (and (cons? (hd (tl (hd V1793)))) (and (= list (hd (hd (tl (hd V1793))))) (and (cons? (tl (hd (tl (hd V1793))))) (and (= () (tl (tl (hd (tl (hd V1793)))))) (and (cons? (tl (tl (hd V1793)))) (and (= () (tl (tl (tl (hd V1793))))) (and (cons? (tl V1793)) (and (= --> (hd (tl V1793))) (and (cons? (tl (tl V1793))) (and (cons? (hd (tl (tl V1793)))) (and (= str (hd (hd (tl (tl V1793))))) (and (cons? (tl (hd (tl (tl V1793))))) (and (cons? (hd (tl (hd (tl (tl V1793)))))) (and (= list (hd (hd (tl (hd (tl (tl V1793))))))) (and (cons? (tl (hd (tl (hd (tl (tl V1793))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl V1793)))))))) (and (cons? (tl (tl (hd (tl (tl V1793)))))) (and (= () (tl (tl (tl (hd (tl (tl V1793))))))) (and (= () (tl (tl (tl V1793)))) (= (hd (tl (hd (tl (hd V1793))))) (hd (tl (hd (tl (hd (tl (tl V1793))))))))))))))))))))))))))))))) (cons (hd (tl (hd (tl (tl V1793))))) (cons ==> (tl (tl (hd (tl (tl V1793)))))))) (true V1793)))

(defun shen.type-error () (simple-error "type error
"))

(defun bootstrap (V1794) (let KLFile (shen.klfile V1794) (let Code (read-file V1794) (let Open (open KLFile out) (let KL (map (lambda X (shen.shen->kl-h X)) Code) (let Write (shen.write-kl KL Open) KLFile))))))

(defun shen.write-kl (V1797 V1798) (cond ((= () V1797) (close V1798)) ((and (cons? V1797) (cons? (hd V1797))) (shen.write-kl (tl V1797) (do (shen.write-kl-h (hd V1797) V1798) V1798))) ((cons? V1797) (shen.write-kl (tl V1797) V1798)) (true (shen.f-error shen.write-kl))))

(defun shen.write-kl-h (V1801 V1802) (cond ((and (cons? V1801) (and (= defun (hd V1801)) (and (cons? (tl V1801)) (and (= fail (hd (tl V1801))) (and (cons? (tl (tl V1801))) (and (= () (hd (tl (tl V1801)))) (and (cons? (tl (tl (tl V1801)))) (= () (tl (tl (tl (tl V1801)))))))))))) (pr "(defun fail () shen.fail!)" V1802)) (true (pr (shen.app V1801 "

" shen.r) V1802))))

(defun shen.klfile (V1803) (cond ((= "" V1803) ".kl") ((= ".shen" V1803) ".kl") ((shen.+string? V1803) (@s (hdstr V1803) (shen.klfile (tlstr V1803)))) (true (shen.f-error shen.klfile))))

