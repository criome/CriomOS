(defun shen.compile-prolog (V2111 V2112) (compile (lambda X (shen.<defprolog> X)) (cons V2111 V2112)))

(defun shen.<defprolog> (V2113) (let Result (if (shen.non-empty-stream? V2113) (let F (shen.hds V2113) (let News1907 (shen.tls V2113) (let Parseshen.<clauses> (shen.<clauses> News1907) (if (shen.parse-failure? Parseshen.<clauses>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<clauses>) (let Aritycheck (shen.prolog-arity-check F (shen.<-out Parseshen.<clauses>)) (let LeftLinear (map (lambda X (shen.linearise-clause X)) (shen.<-out Parseshen.<clauses>)) (shen.horn-clause-procedure F LeftLinear)))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<clauses> (V2114) (let Result (let Parseshen.<clause> (shen.<clause> V2114) (if (shen.parse-failure? Parseshen.<clause>) (shen.parse-failure) (let Parseshen.<clauses> (shen.<clauses> Parseshen.<clause>) (if (shen.parse-failure? Parseshen.<clauses>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<clauses>) (cons (shen.<-out Parseshen.<clause>) (shen.<-out Parseshen.<clauses>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V2114) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) (if (empty? (shen.<-out Parse<!>)) () (simple-error (cn "Prolog syntax error here:
 " (shen.app (shen.<-out Parse<!>) "
 ..." shen.r))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.prolog-arity-check (V2119 V2120) (cond ((and (cons? V2120) (= () (tl V2120))) shen.skip) ((and (cons? V2120) (and (cons? (hd V2120)) (and (cons? (tl (hd V2120))) (= () (tl (tl (hd V2120))))))) (shen.pac-h V2119 (length (hd (hd V2120))) (tl V2120))) (true (shen.f-error shen.prolog-arity-check))))

(defun shen.linearise-clause (V2121) (cond ((and (cons? V2121) (and (cons? (tl V2121)) (= () (tl (tl V2121))))) (shen.lch (shen.linearise (@p (hd V2121) (hd (tl V2121)))))) (true (shen.f-error shen.linearise-clause))))

(defun shen.lch (V2122) (cond ((tuple? V2122) (cons (fst V2122) (cons (shen.lchh (snd V2122)) ()))) (true (shen.f-error shen.lch))))

(defun shen.lchh (V2123) (cond ((and (cons? V2123) (and (= where (hd V2123)) (and (cons? (tl V2123)) (and (cons? (hd (tl V2123))) (and (= = (hd (hd (tl V2123)))) (and (cons? (tl (hd (tl V2123)))) (and (cons? (tl (tl (hd (tl V2123))))) (and (= () (tl (tl (tl (hd (tl V2123)))))) (and (cons? (tl (tl V2123))) (= () (tl (tl (tl V2123))))))))))))) (cons (cons (if (value shen.*occurs*) is! is) (tl (hd (tl V2123)))) (shen.lchh (hd (tl (tl V2123)))))) (true V2123)))

(defun shen.pac-h (V2130 V2131 V2132) (cond ((= () V2132) true) ((and (cons? V2132) (cons? (hd V2132))) (if (= V2131 (length (hd (hd V2132)))) (shen.pac-h V2130 V2131 (tl V2132)) (simple-error (cn "arity error in prolog procedure " (shen.app V2130 "
" shen.a))))) (true (shen.f-error shen.pac-h))))

(defun shen.<clause> (V2133) (let Result (let Parseshen.<head> (shen.<head> V2133) (if (shen.parse-failure? Parseshen.<head>) (shen.parse-failure) (if (shen.=hd? Parseshen.<head> <--) (let News1910 (shen.tls Parseshen.<head>) (let Parseshen.<body> (shen.<body> News1910) (if (shen.parse-failure? Parseshen.<body>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<body>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (shen.<-out Parseshen.<head>) (cons (shen.<-out Parseshen.<body>) ())))))))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<head> (V2134) (let Result (let Parseshen.<hterm> (shen.<hterm> V2134) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<head> (shen.<head> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<head>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<head>) (cons (shen.<-out Parseshen.<hterm>) (shen.<-out Parseshen.<head>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V2134) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<hterm> (V2135) (let Result (if (shen.non-empty-stream? V2135) (let X (shen.hds V2135) (let News1913 (shen.tls V2135) (if (and (atom? X) (not (shen.prolog-keyword? X))) (shen.comb (shen.in-> News1913) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.non-empty-stream? V2135) (let X (shen.hds V2135) (let News1914 (shen.tls V2135) (if (= X (intern ":")) (shen.comb (shen.in-> News1914) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2135) (let SynCons (shen.comb (shen.hds V2135) (shen.<-out V2135)) (if (shen.=hd? SynCons cons) (let News1915 (shen.tls SynCons) (let Parseshen.<hterm1> (shen.<hterm1> News1915) (if (shen.parse-failure? Parseshen.<hterm1>) (shen.parse-failure) (let Parseshen.<hterm2> (shen.<hterm2> Parseshen.<hterm1>) (if (shen.parse-failure? Parseshen.<hterm2>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm2>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2135)) (cons cons (cons (shen.<-out Parseshen.<hterm1>) (cons (shen.<-out Parseshen.<hterm2>) ()))))))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2135) (let SynCons (shen.comb (shen.hds V2135) (shen.<-out V2135)) (if (shen.=hd? SynCons +) (let News1916 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News1916) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2135)) (cons shen.+m (cons (shen.<-out Parseshen.<hterm>) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2135) (let SynCons (shen.comb (shen.hds V2135) (shen.<-out V2135)) (if (shen.=hd? SynCons -) (let News1917 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News1917) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2135)) (cons shen.-m (cons (shen.<-out Parseshen.<hterm>) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2135) (let SynCons (shen.comb (shen.hds V2135) (shen.<-out V2135)) (if (shen.=hd? SynCons mode) (let News1918 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News1918) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (if (shen.=hd? Parseshen.<hterm> +) (let News1919 (shen.tls Parseshen.<hterm>) (let Parseshen.<end> (shen.<end> News1919) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2135)) (cons shen.+m (cons (shen.<-out Parseshen.<hterm>) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2135) (let SynCons (shen.comb (shen.hds V2135) (shen.<-out V2135)) (if (shen.=hd? SynCons mode) (let News1920 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News1920) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (if (shen.=hd? Parseshen.<hterm> -) (let News1921 (shen.tls Parseshen.<hterm>) (let Parseshen.<end> (shen.<end> News1921) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2135)) (cons shen.-m (cons (shen.<-out Parseshen.<hterm>) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)) Result)) Result)) Result)) Result)))

(defun shen.prolog-keyword? (V2136) (element? V2136 (cons (intern ";") (cons <-- ()))))

(defun atom? (V2137) (or (symbol? V2137) (or (string? V2137) (or (boolean? V2137) (or (number? V2137) (empty? V2137))))))

(defun shen.<hterm1> (V2138) (let Result (let Parseshen.<hterm> (shen.<hterm> V2138) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<hterm>) (shen.<-out Parseshen.<hterm>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<hterm2> (V2139) (let Result (let Parseshen.<hterm> (shen.<hterm> V2139) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<hterm>) (shen.<-out Parseshen.<hterm>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<body> (V2140) (let Result (let Parseshen.<literal> (shen.<literal> V2140) (if (shen.parse-failure? Parseshen.<literal>) (shen.parse-failure) (let Parseshen.<body> (shen.<body> Parseshen.<literal>) (if (shen.parse-failure? Parseshen.<body>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<body>) (cons (shen.<-out Parseshen.<literal>) (shen.<-out Parseshen.<body>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V2140) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<literal> (V2141) (let Result (if (shen.=hd? V2141 !) (let News1926 (shen.tls V2141) (shen.comb (shen.in-> News1926) !)) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2141) (let SynCons (shen.comb (shen.hds V2141) (shen.<-out V2141)) (let Parseshen.<bterms> (shen.<bterms> SynCons) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<bterms>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2141)) (shen.<-out Parseshen.<bterms>))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<bterms> (V2142) (let Result (let Parseshen.<bterm> (shen.<bterm> V2142) (if (shen.parse-failure? Parseshen.<bterm>) (shen.parse-failure) (let Parseshen.<bterms> (shen.<bterms> Parseshen.<bterm>) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<bterms>) (cons (shen.<-out Parseshen.<bterm>) (shen.<-out Parseshen.<bterms>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V2142) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<bterm> (V2143) (let Result (let Parseshen.<wildcard> (shen.<wildcard> V2143) (if (shen.parse-failure? Parseshen.<wildcard>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<wildcard>) (shen.<-out Parseshen.<wildcard>)))) (if (shen.parse-failure? Result) (let Result (if (shen.non-empty-stream? V2143) (let X (shen.hds V2143) (let News1929 (shen.tls V2143) (if (atom? X) (shen.comb (shen.in-> News1929) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2143) (let SynCons (shen.comb (shen.hds V2143) (shen.<-out V2143)) (let Parseshen.<bterms> (shen.<bterms> SynCons) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<bterms>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2143)) (shen.<-out Parseshen.<bterms>))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<wildcard> (V2144) (let Result (if (shen.non-empty-stream? V2144) (let X (shen.hds V2144) (let News1931 (shen.tls V2144) (if (= X _) (shen.comb (shen.in-> News1931) (gensym Y)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<sc> (V2145) (let Result (if (shen.non-empty-stream? V2145) (let X (shen.hds V2145) (let News1933 (shen.tls V2145) (if (shen.semicolon? X) (shen.comb (shen.in-> News1933) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.semicolon? (V2146) (= V2146 (intern ";")))

(defun shen.horn-clause-procedure (V2147 V2148) (let Bindings (gensym B) (let Lock (gensym L) (let Key (gensym K) (let Continuation (gensym C) (let Parameters (shen.prolog-parameters V2148) (let HasCut? (shen.hascut? V2148) (let FBody (shen.prolog-fbody V2148 Parameters Bindings Lock Key Continuation HasCut?) (let CutFBody (if HasCut? (cons let (cons Key (cons (cons + (cons Key (cons 1 ()))) (cons FBody ())))) FBody) (let Shen (cons define (cons V2147 (append Parameters (append (cons Bindings (cons Lock (cons Key (cons Continuation (cons -> ()))))) (cons CutFBody ()))))) Shen))))))))))

(defun shen.hascut? (V2151) (cond ((= ! V2151) true) ((cons? V2151) (or (shen.hascut? (hd V2151)) (shen.hascut? (tl V2151)))) (true false)))

(defun shen.prolog-parameters (V2156) (cond ((and (cons? V2156) (cons? (hd V2156))) (shen.parameters (length (hd (hd V2156))))) (true (shen.f-error shen.prolog-parameters))))

(defun shen.prolog-fbody (V2177 V2178 V2179 V2180 V2181 V2182 V2183) (cond ((and (= () V2177) (= true V2183)) (cons shen.unlock (cons V2180 (cons V2181 ())))) ((and (cons? V2177) (and (cons? (hd V2177)) (and (cons? (tl (hd V2177))) (and (= () (tl (tl (hd V2177)))) (and (= () (tl V2177)) (= false V2183)))))) (let Continue (shen.continue (hd (hd V2177)) (hd (tl (hd V2177))) V2179 V2180 V2181 V2182) (cons if (cons (cons shen.unlocked? (cons V2180 ())) (cons (shen.compile-head shen.+m (hd (hd V2177)) V2178 V2179 Continue) (cons false ())))))) ((and (cons? V2177) (and (cons? (hd V2177)) (and (cons? (tl (hd V2177))) (= () (tl (tl (hd V2177))))))) (let Case (gensym C) (let Continue (shen.continue (hd (hd V2177)) (hd (tl (hd V2177))) V2179 V2180 V2181 V2182) (cons let (cons Case (cons (cons if (cons (cons shen.unlocked? (cons V2180 ())) (cons (shen.compile-head shen.+m (hd (hd V2177)) V2178 V2179 Continue) (cons false ())))) (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons (shen.prolog-fbody (tl V2177) V2178 V2179 V2180 V2181 V2182 V2183) (cons Case ())))) ()))))))) (true (simple-error "implementation error in shen.prolog-fbody"))))

(defun shen.unlock (V2184 V2185) (if (and (shen.locked? V2184) (shen.fits? V2185 V2184)) (shen.openlock V2184) false))

(defun shen.locked? (V2186) (not (shen.unlocked? V2186)))

(defun shen.unlocked? (V2187) (<-address V2187 1))

(defun shen.openlock (V2188) (do (address-> V2188 1 true) false))

(defun shen.fits? (V2189 V2190) (= V2189 (<-address V2190 2)))

(defun shen.cut (V2193 V2194 V2195 V2196) (let Compute (thaw V2196) (if (and (= Compute false) (shen.unlocked? V2194)) (shen.lock V2195 V2194) Compute)))

(defun shen.lock (V2197 V2198) (let SetLock (address-> V2198 1 false) (let SetKey (address-> V2198 2 V2197) false)))

(defun shen.continue (V2199 V2200 V2201 V2202 V2203 V2204) (let HVs (shen.extract-vars V2199) (let BVs (shen.extract-vars V2200) (let Free (difference BVs HVs) (let ContinuationCode (cons do (cons (cons shen.incinfs ()) (cons (shen.compile-body V2200 V2201 V2202 V2203 V2204) ()))) (shen.stpart Free ContinuationCode V2201))))))

(defun shen.compile-body (V2221 V2222 V2223 V2224 V2225) (cond ((= () V2221) (cons thaw (cons V2225 ()))) ((and (cons? V2221) (= ! (hd V2221))) (shen.compile-body (cons (cons shen.cut ()) (tl V2221)) V2222 V2223 V2224 V2225)) ((and (cons? V2221) (= () (tl V2221))) (append (shen.deref-calls (hd V2221) V2222) (cons V2222 (cons V2223 (cons V2224 (cons V2225 ())))))) ((cons? V2221) (let P* (shen.deref-calls (hd V2221) V2222) (append P* (cons V2222 (cons V2223 (cons V2224 (cons (shen.freeze-literals (tl V2221) V2222 V2223 V2224 V2225) ()))))))) (true (simple-error "implementation error in shen.compile-fbody"))))

(defun shen.freeze-literals (V2242 V2243 V2244 V2245 V2246) (cond ((= () V2242) V2246) ((and (cons? V2242) (= ! (hd V2242))) (shen.freeze-literals (cons (cons shen.cut ()) (tl V2242)) V2243 V2244 V2245 V2246)) ((cons? V2242) (let P* (shen.deref-calls (hd V2242) V2243) (cons freeze (cons (append P* (cons V2243 (cons V2244 (cons V2245 (cons (shen.freeze-literals (tl V2242) V2243 V2244 V2245 V2246) ()))))) ())))) (true (simple-error "implementation error in shen.freeze-literals"))))

(defun shen.deref-calls (V2251 V2252) (cond ((and (cons? V2251) (= fork (hd V2251))) (cons fork (cons (shen.deref-forked-literals (tl V2251) V2252) ()))) ((cons? V2251) (cons (hd V2251) (map (lambda Y (shen.function-calls Y V2252)) (tl V2251)))) (true (simple-error "implementation error in shen.deref-calls"))))

(defun shen.deref-forked-literals (V2259 V2260) (cond ((= () V2259) ()) ((cons? V2259) (cons cons (cons (shen.deref-calls (hd V2259) V2260) (cons (shen.deref-forked-literals (tl V2259) V2260) ())))) (true (simple-error "fork requires a list of literals
"))))

(defun shen.function-calls (V2263 V2264) (cond ((and (cons? V2263) (and (= cons (hd V2263)) (and (cons? (tl V2263)) (and (cons? (tl (tl V2263))) (= () (tl (tl (tl V2263)))))))) (cons cons (cons (shen.function-calls (hd (tl V2263)) V2264) (cons (shen.function-calls (hd (tl (tl V2263))) V2264) ())))) ((cons? V2263) (shen.deref-terms V2263 V2264)) (true V2263)))

(defun shen.deref-terms (V2269 V2270) (cond ((and (cons? V2269) (and (= 0 (hd V2269)) (and (cons? (tl V2269)) (= () (tl (tl V2269)))))) (if (variable? (hd (tl V2269))) (hd (tl V2269)) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V2269)) "
" shen.s))))) ((and (cons? V2269) (and (= 1 (hd V2269)) (and (cons? (tl V2269)) (= () (tl (tl V2269)))))) (if (variable? (hd (tl V2269))) (cons shen.lazyderef (cons (hd (tl V2269)) (cons V2270 ()))) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V2269)) "
" shen.s))))) ((variable? V2269) (cons shen.deref (cons V2269 (cons V2270 ())))) ((cons? V2269) (map (lambda Z (shen.deref-terms Z V2270)) V2269)) (true V2269)))

(defun shen.compile-head (V2288 V2289 V2290 V2291 V2292) (cond ((and (= () V2289) (= () V2290)) V2292) ((and (cons? V2289) (and (cons? (hd V2289)) (and (= shen.+m (hd (hd V2289))) (and (cons? (tl (hd V2289))) (= () (tl (tl (hd V2289)))))))) (shen.compile-head V2288 (cons shen.+m (cons (hd (tl (hd V2289))) (cons V2288 (tl V2289)))) V2290 V2291 V2292)) ((and (cons? V2289) (and (cons? (hd V2289)) (and (= shen.-m (hd (hd V2289))) (and (cons? (tl (hd V2289))) (= () (tl (tl (hd V2289)))))))) (shen.compile-head V2288 (cons shen.-m (cons (hd (tl (hd V2289))) (cons V2288 (tl V2289)))) V2290 V2291 V2292)) ((and (cons? V2289) (= shen.-m (hd V2289))) (shen.compile-head shen.-m (tl V2289) V2290 V2291 V2292)) ((and (cons? V2289) (= shen.+m (hd V2289))) (shen.compile-head shen.+m (tl V2289) V2290 V2291 V2292)) ((and (cons? V2289) (and (cons? V2290) (shen.wildcard? (hd V2289)))) (shen.compile-head V2288 (tl V2289) (tl V2290) V2291 V2292)) ((and (cons? V2289) (variable? (hd V2289))) (shen.variable-case V2288 V2289 V2290 V2291 V2292)) ((and (= shen.-m V2288) (and (cons? V2289) (atom? (hd V2289)))) (shen.atom-case-minus V2289 V2290 V2291 V2292)) ((and (= shen.-m V2288) (and (cons? V2289) (and (cons? (hd V2289)) (and (= cons (hd (hd V2289))) (and (cons? (tl (hd V2289))) (and (cons? (tl (tl (hd V2289)))) (= () (tl (tl (tl (hd V2289))))))))))) (shen.cons-case-minus V2289 V2290 V2291 V2292)) ((and (= shen.+m V2288) (and (cons? V2289) (atom? (hd V2289)))) (shen.atom-case-plus V2289 V2290 V2291 V2292)) ((and (= shen.+m V2288) (and (cons? V2289) (and (cons? (hd V2289)) (and (= cons (hd (hd V2289))) (and (cons? (tl (hd V2289))) (and (cons? (tl (tl (hd V2289)))) (= () (tl (tl (tl (hd V2289))))))))))) (shen.cons-case-plus V2289 V2290 V2291 V2292)) (true (simple-error "implementation error in shen.compile-head"))))

(defun shen.variable-case (V2303 V2304 V2305 V2306 V2307) (cond ((and (cons? V2304) (cons? V2305)) (if (variable? (hd V2305)) (shen.compile-head V2303 (tl V2304) (tl V2305) V2306 (subst (hd V2305) (hd V2304) V2307)) (cons let (cons (hd V2304) (cons (hd V2305) (cons (shen.compile-head V2303 (tl V2304) (tl V2305) V2306 V2307) ())))))) (true (simple-error "implementation error in shen.variable-case"))))

(defun shen.atom-case-minus (V2316 V2317 V2318 V2319) (cond ((and (cons? V2316) (cons? V2317)) (let Tm (gensym Tm) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V2317) (cons V2318 ()))) (cons (cons if (cons (cons = (cons Tm (cons (hd V2316) ()))) (cons (shen.compile-head shen.-m (tl V2316) (tl V2317) V2318 V2319) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.atom-case-minus"))))

(defun shen.cons-case-minus (V2328 V2329 V2330 V2331) (cond ((and (cons? V2328) (and (cons? (hd V2328)) (and (= cons (hd (hd V2328))) (and (cons? (tl (hd V2328))) (and (cons? (tl (tl (hd V2328)))) (and (= () (tl (tl (tl (hd V2328))))) (cons? V2329))))))) (let Tm (gensym Tm) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V2329) (cons V2330 ()))) (cons (cons if (cons (cons cons? (cons Tm ())) (cons (shen.compile-head shen.-m (cons (hd (tl (hd V2328))) (cons (hd (tl (tl (hd V2328)))) (tl V2328))) (cons (cons hd (cons Tm ())) (cons (cons tl (cons Tm ())) (tl V2329))) V2330 V2331) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.cons-case-minus"))))

(defun shen.atom-case-plus (V2340 V2341 V2342 V2343) (cond ((and (cons? V2340) (cons? V2341)) (let Tm (gensym Tm) (let GoTo (gensym GoTo) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V2341) (cons V2342 ()))) (cons GoTo (cons (cons freeze (cons (shen.compile-head shen.+m (tl V2340) (tl V2341) V2342 V2343) ())) (cons (cons if (cons (cons = (cons Tm (cons (hd V2340) ()))) (cons (cons thaw (cons GoTo ())) (cons (cons if (cons (cons shen.pvar? (cons Tm ())) (cons (cons shen.bind! (cons Tm (cons (shen.demode (hd V2340)) (cons V2342 (cons GoTo ()))))) (cons false ())))) ())))) ()))))))))) (true (simple-error "implementation error in shen.atom-case-plus"))))

(defun shen.cons-case-plus (V2352 V2353 V2354 V2355) (cond ((and (cons? V2352) (and (cons? (hd V2352)) (and (= cons (hd (hd V2352))) (and (cons? (tl (hd V2352))) (and (cons? (tl (tl (hd V2352)))) (and (= () (tl (tl (tl (hd V2352))))) (cons? V2353))))))) (let Tm (gensym Tm) (let GoTo (gensym GoTo) (let Vars (shen.extract-vars (cons (hd (tl (hd V2352))) (hd (tl (tl (hd V2352)))))) (let Tame (shen.tame (hd V2352)) (let TVars (shen.extract-vars Tame) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V2353) (cons V2354 ()))) (cons GoTo (cons (shen.goto Vars (shen.compile-head shen.+m (tl V2352) (tl V2353) V2354 V2355)) (cons (cons if (cons (cons cons? (cons Tm ())) (cons (shen.compile-head shen.+m (tl (hd V2352)) (cons (cons hd (cons Tm ())) (cons (cons tl (cons Tm ())) ())) V2354 (shen.invoke GoTo Vars)) (cons (cons if (cons (cons shen.pvar? (cons Tm ())) (cons (shen.stpart TVars (cons shen.bind! (cons Tm (cons (shen.demode Tame) (cons V2354 (cons (cons freeze (cons (shen.invoke GoTo Vars) ())) ()))))) V2354) (cons false ())))) ())))) ())))))))))))) (true (simple-error "implementation error in shen.cons-case-plus"))))

(defun shen.demode (V2356) (cond ((and (cons? V2356) (and (= shen.+m (hd V2356)) (and (cons? (tl V2356)) (= () (tl (tl V2356)))))) (shen.demode (hd (tl V2356)))) ((and (cons? V2356) (and (= shen.-m (hd V2356)) (and (cons? (tl V2356)) (= () (tl (tl V2356)))))) (shen.demode (hd (tl V2356)))) ((cons? V2356) (map (lambda Z (shen.demode Z)) V2356)) (true V2356)))

(defun shen.tame (V2357) (cond ((shen.wildcard? V2357) (gensym Y)) ((cons? V2357) (map (lambda Z (shen.tame Z)) V2357)) (true V2357)))

(defun shen.goto (V2358 V2359) (cond ((= () V2358) (cons freeze (cons V2359 ()))) (true (shen.goto-h V2358 V2359))))

(defun shen.goto-h (V2360 V2361) (cond ((= () V2360) V2361) ((cons? V2360) (cons lambda (cons (hd V2360) (cons (shen.goto-h (tl V2360) V2361) ())))) (true (shen.f-error shen.goto-h))))

(defun shen.invoke (V2362 V2363) (cond ((= () V2363) (cons thaw (cons V2362 ()))) (true (cons V2362 V2363))))

(defun shen.wildcard? (V2364) (= V2364 _))

(defun shen.pvar? (V2365) (trap-error (and (absvector? V2365) (= (<-address V2365 0) shen.pvar)) (lambda E false)))

(defun shen.lazyderef (V2366 V2367) (if (shen.pvar? V2366) (let Value (<-address V2367 (<-address V2366 1)) (if (= Value shen.-null-) V2366 (shen.lazyderef Value V2367))) V2366))

(defun shen.deref (V2368 V2369) (cond ((cons? V2368) (cons (shen.deref (hd V2368) V2369) (shen.deref (tl V2368) V2369))) (true (if (shen.pvar? V2368) (let Value (<-address V2369 (<-address V2368 1)) (if (= Value shen.-null-) V2368 (shen.deref Value V2369))) V2368))))

(defun shen.bind! (V2370 V2371 V2372 V2373) (let Bind (shen.bindv V2370 V2371 V2372) (let Compute (thaw V2373) (if (= Compute false) (shen.unwind V2370 V2372 Compute) Compute))))

(defun shen.bindv (V2374 V2375 V2376) (address-> V2376 (<-address V2374 1) V2375))

(defun shen.unwind (V2377 V2378 V2379) (do (address-> V2378 (<-address V2377 1) shen.-null-) V2379))

(defun shen.stpart (V2388 V2389 V2390) (cond ((= () V2388) V2389) ((cons? V2388) (cons let (cons (hd V2388) (cons (cons shen.newpv (cons V2390 ())) (cons (cons shen.gc (cons V2390 (cons (shen.stpart (tl V2388) V2389 V2390) ()))) ()))))) (true (simple-error "implementation error in shen.stpart"))))

(defun shen.gc (V2391 V2392) (if (= V2392 false) (let N (shen.ticket-number V2391) (do (shen.decrement-ticket N V2391) V2392)) V2392))

(defun shen.decrement-ticket (V2393 V2394) (address-> V2394 1 (- V2393 1)))

(defun shen.newpv (V2395) (let N (shen.ticket-number V2395) (let NewBindings (shen.make-prolog-variable N) (let NextTicket (shen.nextticket V2395 N) NewBindings))))

(defun shen.ticket-number (V2396) (<-address V2396 1))

(defun shen.nextticket (V2397 V2398) (let NewVector (address-> V2397 V2398 shen.-null-) (address-> NewVector 1 (+ V2398 1))))

(defun shen.make-prolog-variable (V2399) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V2399))

(defun shen.pvar (V2400) (cn "Var" (shen.app (<-address V2400 1) "" shen.a)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.prolog-vector-size (V2401) (if (and (integer? V2401) (> V2401 0)) (set shen.*size-prolog-vector* V2401) (simple-error (cn "prolog vector size: size should be a positive integer; not " (shen.app V2401 "" shen.a)))))

(defun shen.lzy=! (V2413 V2414 V2415 V2416) (cond ((= V2413 V2414) (thaw V2416)) ((and (shen.pvar? V2413) (not (shen.occurs? V2413 (shen.deref V2414 V2415)))) (shen.bind! V2413 V2414 V2415 V2416)) ((and (shen.pvar? V2414) (not (shen.occurs? V2414 (shen.deref V2413 V2415)))) (shen.bind! V2414 V2413 V2415 V2416)) ((and (cons? V2413) (cons? V2414)) (shen.lzy=! (shen.lazyderef (hd V2413) V2415) (shen.lazyderef (hd V2414) V2415) V2415 (freeze (shen.lzy=! (shen.lazyderef (tl V2413) V2415) (shen.lazyderef (tl V2414) V2415) V2415 V2416)))) (true false)))

(defun shen.lzy= (V2428 V2429 V2430 V2431) (cond ((= V2428 V2429) (thaw V2431)) ((shen.pvar? V2428) (shen.bind! V2428 V2429 V2430 V2431)) ((shen.pvar? V2429) (shen.bind! V2429 V2428 V2430 V2431)) ((and (cons? V2428) (cons? V2429)) (shen.lzy= (shen.lazyderef (hd V2428) V2430) (shen.lazyderef (hd V2429) V2430) V2430 (freeze (shen.lzy= (shen.lazyderef (tl V2428) V2430) (shen.lazyderef (tl V2429) V2430) V2430 V2431)))) (true false)))

(defun shen.occurs? (V2437 V2438) (cond ((= V2437 V2438) true) ((cons? V2438) (or (shen.occurs? V2437 (hd V2438)) (shen.occurs? V2437 (tl V2438)))) (true false)))

(defun call (V2439 V2440 V2441 V2442 V2443) ((((V2439 V2440) V2441) V2442) V2443))

(defun return (V2450 V2451 V2452 V2453 V2454) (shen.deref V2450 V2451))

(defun when (V2461 V2462 V2463 V2464 V2465) (if V2461 (thaw V2465) false))

(defun is (V2466 V2467 V2468 V2469 V2470 V2471) (shen.lzy= (shen.lazyderef V2466 V2468) (shen.lazyderef V2467 V2468) V2468 V2471))

(defun is! (V2472 V2473 V2474 V2475 V2476 V2477) (shen.lzy=! (shen.lazyderef V2472 V2474) (shen.lazyderef V2473 V2474) V2474 V2477))

(defun bind (V2482 V2483 V2484 V2485 V2486 V2487) (shen.bind! V2482 V2483 V2484 V2487))

(defun var? (V2488 V2489 V2490 V2491 V2492) (if (shen.pvar? (shen.lazyderef V2488 V2489)) (thaw V2492) false))

(defun shen.print-prolog-vector (V2495) "|prolog vector|")

(defun fork (V2514 V2515 V2516 V2517 V2518) (cond ((= () V2514) false) ((cons? V2514) (let Case (((((hd V2514) V2515) V2516) V2517) V2518) (if (= Case false) (fork (tl V2514) V2515 V2516 V2517 V2518) Case))) (true (simple-error "fork expects a list of literals
"))))

(defun findall (V2519 V2520 V2521 V2522 V2523 V2524 V2525) (if (shen.unlocked? V2523) (let Store (shen.newpv V2522) (shen.gc V2522 (do (shen.incinfs) (is Store () V2522 V2523 V2524 (freeze (shen.findall-h V2519 V2520 V2521 Store V2522 V2523 V2524 V2525)))))) false))

(defun shen.findall-h (V2526 V2527 V2528 V2529 V2530 V2531 V2532 V2533) (let C1950 (if (shen.unlocked? V2531) (do (shen.incinfs) (call V2527 V2530 V2531 V2532 (freeze (shen.overbind V2526 V2529 V2530 V2531 V2532 V2533)))) false) (if (= C1950 false) (if (shen.unlocked? V2531) (do (shen.incinfs) (is! V2528 V2529 V2530 V2531 V2532 V2533)) false) C1950)))

(defun shen.overbind (V2540 V2541 V2542 V2543 V2544 V2545) (do (shen.bindv V2541 (cons (shen.deref V2540 V2542) (shen.lazyderef V2541 V2542)) V2542) false))

(defun occurs-check (V2548) (cond ((= + V2548) (set shen.*occurs* true)) ((= - V2548) (set shen.*occurs* false)) (true (simple-error "occurs-check expects a + or a -.
"))))

