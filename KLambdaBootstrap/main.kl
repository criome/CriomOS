(defun aski.main () (let Args (posix-argv) (let RunResult (run Args) (aski.handleResult RunResult))))

(defun run (V1107) (cond ((and (cons? V1107) (= () (tl V1107))) (trap-error (aski.runFromStdInput) (lambda Y1105 (aski.emitErrorResult Y1105)))) ((and (cons? V1107) (and (cons? (tl V1107)) (= () (tl (tl V1107))))) (trap-error (aski.runScript (hd (tl V1107))) (lambda Y1106 (aski.emitErrorResult Y1106)))) (true (shen.f-error run))))

(defun aski.runFromStdInput () (do (eval (stinput)) (cons aski.success ())))

(defun aski.emitErrorResult (V1108) (cons error (cons V1108 ())))

(defun aski.runScript (V1109) (let Code (read-file V1109) (let Evaluation (map (lambda X (eval-kl (shen.shen->kl X))) Code) (cons aski.success ()))))

(defun aski.handleResult (V1110) (cond ((and (cons? V1110) (and (= error (hd V1110)) (and (cons? (tl V1110)) (= () (tl (tl V1110)))))) (do (pr (error-to-string (hd (tl V1110))) (stoutput)) (exit 1))) ((and (cons? V1110) (and (= aski.success (hd V1110)) (= () (tl V1110)))) (exit 0)) (true (shen.f-error aski.handleResult))))

