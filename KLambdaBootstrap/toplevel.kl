(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (do (pr (error-to-string E) (stoutput)) (nl 0)))) (shen.loop)))))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2021, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let Package (value shen.*package*) (let Lineread (shen.package-user-input Package (lineread (stinput))) (let History (shen.update-history) (shen.evaluate-lineread Lineread History (value shen.*tc*))))))

(defun shen.package-user-input (V4529 V4530) (cond ((= null V4529) V4530) (true (let Str (str V4529) (let External (external V4529) (map (lambda X (shen.pui-h Str External X)) V4530))))))

(defun shen.pui-h (V4535 V4536 V4537) (cond ((and (cons? V4537) (and (= fn (hd V4537)) (and (cons? (tl V4537)) (= () (tl (tl V4537)))))) (if (shen.internal? (hd (tl V4537)) V4535 V4536) (cons fn (cons (shen.intern-in-package V4535 (hd (tl V4537))) ())) V4537)) ((cons? V4537) (if (shen.internal? (hd V4537) V4535 V4536) (cons (shen.intern-in-package V4535 (hd V4537)) (map (lambda Y (shen.pui-h V4535 V4536 Y)) (tl V4537))) (if (cons? (hd V4537)) (map (lambda Y (shen.pui-h V4535 V4536 Y)) V4537) (cons (hd V4537) (map (lambda Y (shen.pui-h V4535 V4536 Y)) (tl V4537)))))) (true V4537)))

(defun shen.update-history () (set shen.*history* (cons (it) (value shen.*history*))))

(defun shen.evaluate-lineread (V4548 V4549 V4550) (cond ((and (cons? V4548) (and (= () (tl V4548)) (and (cons? V4549) (and (= "!!" (hd V4549)) (cons? (tl V4549)))))) (let Y (read-from-string (hd (tl V4549))) (let NewHistory (set shen.*history* (cons (hd (tl V4549)) (tl V4549))) (let Print (pr (shen.app (hd (tl V4549)) "
" shen.a) (stoutput)) (shen.evaluate-lineread Y NewHistory V4550))))) ((and (cons? V4548) (and (= () (tl V4548)) (and (cons? V4549) (and (shen.+string? (hd V4549)) (= "%" (hdstr (hd V4549))))))) (let Read (hd (read-from-string (tlstr (hd V4549)))) (let Peek (shen.peek-history Read (tlstr (hd V4549)) (tl V4549)) (let NewHistory (set shen.*history* (tl V4549)) (abort))))) ((and (cons? V4548) (and (= () (tl V4548)) (and (cons? V4549) (and (shen.+string? (hd V4549)) (= "!" (hdstr (hd V4549))))))) (let Read (hd (read-from-string (tlstr (hd V4549)))) (let Match (shen.use-history Read (tlstr (hd V4549)) (tl V4549)) (let Print (pr (shen.app Match "
" shen.a) (stoutput)) (let Y (read-from-string Match) (let NewHistory (set shen.*history* (cons Match (tl V4549))) (shen.evaluate-lineread Y NewHistory V4550))))))) ((and (cons? V4548) (and (= () (tl V4548)) (and (cons? V4549) (and (shen.+string? (hd V4549)) (= "%" (hdstr (hd V4549))))))) (let Read (hd (read-from-string (tlstr (hd V4549)))) (let Peek (shen.peek-history Read (tlstr (hd V4549)) (tl V4549)) (let NewHistory (set shen.*history* (tl V4549)) (abort))))) ((= true V4550) (shen.check-eval-and-print V4548)) ((= false V4550) (shen.eval-and-print V4548)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V4551 V4552 V4553) (if (integer? V4551) (nth (+ 1 V4551) (reverse V4553)) (if (symbol? V4551) (shen.string-match V4552 V4553) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V4554 V4555 V4556) (if (integer? V4554) (pr (cn "
" (shen.app (nth (+ 1 V4554) (reverse V4556)) "" shen.a)) (stoutput)) (if (or (= V4555 "") (symbol? V4554)) (shen.recursive-string-match 0 V4555 (reverse V4556)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V4566 V4567) (cond ((= () V4567) (simple-error "
input not found")) ((and (cons? V4567) (shen.string-prefix? V4566 (hd V4567))) (hd V4567)) ((cons? V4567) (shen.string-match V4566 (tl V4567))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V4575 V4576) (cond ((= "" V4575) true) ((and (shen.+string? V4575) (shen.whitespace? (string->n (hdstr V4575)))) (shen.string-prefix? (tlstr V4575) V4576)) ((and (shen.+string? V4576) (shen.whitespace? (string->n (hdstr V4576)))) (shen.string-prefix? V4575 (tlstr V4576))) ((and (shen.+string? V4576) (= "(" (hdstr V4576))) (shen.string-prefix? V4575 (tlstr V4576))) ((and (shen.+string? V4575) (and (shen.+string? V4576) (= (hdstr V4575) (hdstr V4576)))) (shen.string-prefix? (tlstr V4575) (tlstr V4576))) (true false)))

(defun shen.recursive-string-match (V4587 V4588 V4589) (cond ((= () V4589) shen.skip) ((cons? V4589) (do (if (shen.string-prefix? V4588 (hd V4589)) (pr (shen.app V4587 (cn ". " (shen.app (hd V4589) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V4587 1) V4588 (tl V4589)))) (true (simple-error "implementation error in shen.recursive-string-match"))))

