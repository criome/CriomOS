(defun print (V4785) (let String (shen.insert V4785 "~S") (let Print (pr String (stoutput)) V4785)))

(defun pr (V4786 V4787) (if (value *hush*) V4786 (if (shen.char-stoutput? V4787) (shen.write-string V4786 V4787) (shen.write-chars V4786 V4787 (shen.string->byte V4786 0) 1))))

(defun shen.string->byte (V4788 V4789) (trap-error (string->n (pos V4788 V4789)) (lambda E shen.eos)))

(defun shen.write-chars (V4790 V4791 V4792 V4793) (cond ((= shen.eos V4792) V4790) (true (shen.write-chars V4790 V4791 (do (write-byte V4792 V4791) (shen.string->byte V4790 V4793)) (+ V4793 1)))))

(defun shen.mkstr (V4794 V4795) (cond ((string? V4794) (shen.mkstr-l (shen.proc-nl V4794) V4795)) (true (shen.mkstr-r (cons shen.proc-nl (cons V4794 ())) V4795))))

(defun shen.mkstr-l (V4800 V4801) (cond ((= () V4801) V4800) ((cons? V4801) (shen.mkstr-l (shen.insert-l (hd V4801) V4800) (tl V4801))) (true (simple-error "implementation error in shen.mkstr-l"))))

(defun shen.insert-l (V4808 V4809) (cond ((= "" V4809) "") ((and (shen.+string? V4809) (and (= "~" (hdstr V4809)) (and (shen.+string? (tlstr V4809)) (= "A" (hdstr (tlstr V4809)))))) (cons shen.app (cons V4808 (cons (tlstr (tlstr V4809)) (cons shen.a ()))))) ((and (shen.+string? V4809) (and (= "~" (hdstr V4809)) (and (shen.+string? (tlstr V4809)) (= "R" (hdstr (tlstr V4809)))))) (cons shen.app (cons V4808 (cons (tlstr (tlstr V4809)) (cons shen.r ()))))) ((and (shen.+string? V4809) (and (= "~" (hdstr V4809)) (and (shen.+string? (tlstr V4809)) (= "S" (hdstr (tlstr V4809)))))) (cons shen.app (cons V4808 (cons (tlstr (tlstr V4809)) (cons shen.s ()))))) ((shen.+string? V4809) (shen.factor-cn (cons cn (cons (hdstr V4809) (cons (shen.insert-l V4808 (tlstr V4809)) ()))))) ((and (cons? V4809) (and (= cn (hd V4809)) (and (cons? (tl V4809)) (and (cons? (tl (tl V4809))) (= () (tl (tl (tl V4809)))))))) (cons cn (cons (hd (tl V4809)) (cons (shen.insert-l V4808 (hd (tl (tl V4809)))) ())))) ((and (cons? V4809) (and (= shen.app (hd V4809)) (and (cons? (tl V4809)) (and (cons? (tl (tl V4809))) (and (cons? (tl (tl (tl V4809)))) (= () (tl (tl (tl (tl V4809)))))))))) (cons shen.app (cons (hd (tl V4809)) (cons (shen.insert-l V4808 (hd (tl (tl V4809)))) (tl (tl (tl V4809))))))) (true (simple-error "implementation error in shen.insert-l"))))

(defun shen.factor-cn (V4810) (cond ((and (cons? V4810) (and (= cn (hd V4810)) (and (cons? (tl V4810)) (and (cons? (tl (tl V4810))) (and (cons? (hd (tl (tl V4810)))) (and (= cn (hd (hd (tl (tl V4810))))) (and (cons? (tl (hd (tl (tl V4810))))) (and (cons? (tl (tl (hd (tl (tl V4810)))))) (and (= () (tl (tl (tl (hd (tl (tl V4810))))))) (and (= () (tl (tl (tl V4810)))) (and (string? (hd (tl V4810))) (string? (hd (tl (hd (tl (tl V4810))))))))))))))))) (cons cn (cons (cn (hd (tl V4810)) (hd (tl (hd (tl (tl V4810)))))) (tl (tl (hd (tl (tl V4810)))))))) (true V4810)))

(defun shen.proc-nl (V4813) (cond ((= "" V4813) "") ((and (shen.+string? V4813) (and (= "~" (hdstr V4813)) (and (shen.+string? (tlstr V4813)) (= "%" (hdstr (tlstr V4813)))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V4813))))) ((shen.+string? V4813) (cn (hdstr V4813) (shen.proc-nl (tlstr V4813)))) (true (simple-error "implementation error in shen.proc-nl"))))

(defun shen.mkstr-r (V4818 V4819) (cond ((= () V4819) V4818) ((cons? V4819) (shen.mkstr-r (cons shen.insert (cons (hd V4819) (cons V4818 ()))) (tl V4819))) (true (simple-error "implementation error in shen.mkstr-r"))))

(defun shen.insert (V4820 V4821) (shen.insert-h V4820 V4821 ""))

(defun shen.insert-h (V4830 V4831 V4832) (cond ((= "" V4831) V4832) ((and (shen.+string? V4831) (and (= "~" (hdstr V4831)) (and (shen.+string? (tlstr V4831)) (= "A" (hdstr (tlstr V4831)))))) (cn V4832 (shen.app V4830 (tlstr (tlstr V4831)) shen.a))) ((and (shen.+string? V4831) (and (= "~" (hdstr V4831)) (and (shen.+string? (tlstr V4831)) (= "R" (hdstr (tlstr V4831)))))) (cn V4832 (shen.app V4830 (tlstr (tlstr V4831)) shen.r))) ((and (shen.+string? V4831) (and (= "~" (hdstr V4831)) (and (shen.+string? (tlstr V4831)) (= "S" (hdstr (tlstr V4831)))))) (cn V4832 (shen.app V4830 (tlstr (tlstr V4831)) shen.s))) ((shen.+string? V4831) (shen.insert-h V4830 (tlstr V4831) (cn V4832 (hdstr V4831)))) (true (simple-error "implementation error in shen.insert-h"))))

(defun shen.app (V4833 V4834 V4835) (cn (shen.arg->str V4833 V4835) V4834))

(defun shen.arg->str (V4839 V4840) (cond ((= V4839 (fail)) "...") ((shen.list? V4839) (shen.list->str V4839 V4840)) ((string? V4839) (shen.str->str V4839 V4840)) ((absvector? V4839) (shen.vector->str V4839 V4840)) (true (shen.atom->str V4839))))

(defun shen.list->str (V4841 V4842) (cond ((= shen.r V4842) (@s "(" (@s (shen.iter-list V4841 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V4841 V4842 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V4853 V4854 V4855) (cond ((= () V4853) "") ((= 0 V4855) "... etc") ((and (cons? V4853) (= () (tl V4853))) (shen.arg->str (hd V4853) V4854)) ((cons? V4853) (@s (shen.arg->str (hd V4853) V4854) (@s " " (shen.iter-list (tl V4853) V4854 (- V4855 1))))) (true (@s "|" (@s " " (shen.arg->str V4853 V4854))))))

(defun shen.str->str (V4858 V4859) (cond ((= shen.a V4859) V4858) (true (@s (n->string 34) (@s V4858 (n->string 34))))))

(defun shen.vector->str (V4860 V4861) (if (shen.print-vector? V4860) ((fn (<-address V4860 0)) V4860) (if (vector? V4860) (@s "<" (@s (shen.iter-vector V4860 1 V4861 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V4860 0 V4861 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V4862) (let Zero (<-address V4862 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V4863) (not (= (arity V4863) -1)))

(defun shen.tuple (V4864) (cn "(@p " (shen.app (<-address V4864 1) (cn " " (shen.app (<-address V4864 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V4871 V4872 V4873 V4874) (cond ((= 0 V4874) "... etc") (true (let Item (trap-error (<-address V4871 V4872) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V4871 (+ V4872 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V4873) (@s (shen.arg->str Item V4873) (@s " " (shen.iter-vector V4871 (+ V4872 1) V4873 (- V4874 1)))))))))))

(defun shen.atom->str (V4875) (trap-error (str V4875) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4876) (or (empty? V4876) (cons? V4876)))

