(defun thaw (V3416) (V3416))

(defun eval (V3417) (eval-kl (shen.shen->kl (shen.process-applications (macroexpand V3417) (shen.find-types V3417)))))

(defun external (V3418) (cond ((= null V3418) ()) (true (trap-error (get V3418 shen.external-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V3418 " does not exist.
;" shen.a))))))))

(defun internal (V3419) (cond ((= null V3419) ()) (true (trap-error (get V3419 shen.internal-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V3419 " does not exist.
;" shen.a))))))))

(defun fail-if (V3420 V3421) (if (V3420 V3421) (fail) V3421))

(defun @s (V3422 V3423) (cn V3422 V3423))

(defun tc? () (value shen.*tc*))

(defun ps (V3424) (trap-error (get V3424 shen.source (value *property-vector*)) (lambda E (simple-error (shen.app V3424 " not found.
" shen.a)))))

(defun stinput () (value *stinput*))

(defun vector (V3425) (let Vector (absvector (+ V3425 1)) (let ZeroStamp (address-> Vector 0 V3425) (let Standard (if (= V3425 0) ZeroStamp (shen.fillvector ZeroStamp 1 V3425 (fail))) Standard))))

(defun shen.fillvector (V3427 V3428 V3429 V3430) (cond ((= V3428 V3429) (address-> V3427 V3429 V3430)) (true (shen.fillvector (address-> V3427 V3428 V3430) (+ 1 V3428) V3429 V3430))))

(defun vector? (V3431) (and (absvector? V3431) (trap-error (>= (<-address V3431 0) 0) (lambda E false))))

(defun vector-> (V3432 V3433 V3434) (if (= V3433 0) (simple-error "cannot access 0th element of a vector
") (address-> V3432 V3433 V3434)))

(defun <-vector (V3435 V3436) (if (= V3436 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V3435 V3436) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))

(defun shen.posint? (V3437) (and (integer? V3437) (>= V3437 0)))

(defun limit (V3438) (<-address V3438 0))

(defun symbol? (V3439) (cond ((or (boolean? V3439) (or (number? V3439) (or (string? V3439) (or (cons? V3439) (or (empty? V3439) (vector? V3439)))))) false) ((element? V3439 (cons { (cons } (cons (intern ":") (cons (intern ";") (cons (intern ",") ())))))) true) (true (trap-error (let String (str V3439) (shen.analyse-symbol? String)) (lambda E false)))))

(defun shen.analyse-symbol? (V3442) (cond ((shen.+string? V3442) (and (shen.alpha? (string->n (hdstr V3442))) (shen.alphanums? (tlstr V3442)))) (true (simple-error "implementation error in shen.analyse-symbol?"))))

(defun shen.alphanums? (V3445) (cond ((= "" V3445) true) ((shen.+string? V3445) (let N (string->n (hdstr V3445)) (and (or (shen.alpha? N) (shen.digit? N)) (shen.alphanums? (tlstr V3445))))) (true (simple-error "implementation error in shen.alphanums?"))))

(defun variable? (V3446) (cond ((or (boolean? V3446) (or (number? V3446) (string? V3446))) false) (true (trap-error (let String (str V3446) (shen.analyse-variable? String)) (lambda E false)))))

(defun shen.analyse-variable? (V3449) (cond ((shen.+string? V3449) (and (shen.uppercase? (string->n (hdstr V3449))) (shen.alphanums? (tlstr V3449)))) (true (simple-error "implementation error in shen.analyse-variable?"))))

(defun gensym (V3450) (concat V3450 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V3451 V3452) (intern (cn (str V3451) (str V3452))))

(defun @p (V3453 V3454) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V3453) (let Snd (address-> Vector 2 V3454) Vector)))))

(defun fst (V3455) (<-address V3455 1))

(defun snd (V3456) (<-address V3456 2))

(defun tuple? (V3457) (trap-error (and (absvector? V3457) (= shen.tuple (<-address V3457 0))) (lambda E false)))

(defun append (V3462 V3463) (cond ((= () V3462) V3463) ((cons? V3462) (cons (hd V3462) (append (tl V3462) V3463))) (true (simple-error "attempt to append a non-list"))))

(defun @v (V3464 V3465) (let Limit (limit V3465) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V3464) (if (= Limit 0) X+NewVector (shen.@v-help V3465 1 Limit X+NewVector))))))

(defun shen.@v-help (V3467 V3468 V3469 V3470) (cond ((= V3468 V3469) (shen.copyfromvector V3467 V3470 V3469 (+ V3469 1))) (true (shen.@v-help V3467 (+ V3468 1) V3469 (shen.copyfromvector V3467 V3470 V3468 (+ V3468 1))))))

(defun shen.copyfromvector (V3471 V3472 V3473 V3474) (trap-error (vector-> V3472 V3474 (<-vector V3471 V3473)) (lambda E V3472)))

(defun hdv (V3475) (trap-error (<-vector V3475 1) (lambda E (simple-error "hdv needs a non-empty vector as an argument
"))))

(defun tlv (V3476) (let Limit (limit V3476) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V3476 2 Limit (vector (- Limit 1))))))))

(defun shen.tlv-help (V3478 V3479 V3480 V3481) (cond ((= V3479 V3480) (shen.copyfromvector V3478 V3481 V3480 (- V3480 1))) (true (shen.tlv-help V3478 (+ V3479 1) V3480 (shen.copyfromvector V3478 V3481 V3479 (- V3479 1))))))

(defun assoc (V3493 V3494) (cond ((= () V3494) ()) ((and (cons? V3494) (and (cons? (hd V3494)) (= V3493 (hd (hd V3494))))) (hd V3494)) ((cons? V3494) (assoc V3493 (tl V3494))) (true (simple-error "attempt to search a non-list with assoc
"))))

(defun boolean? (V3497) (cond ((= true V3497) true) ((= false V3497) true) (true false)))

(defun nl (V3498) (cond ((= 0 V3498) 0) (true (do (pr "
" (stoutput)) (nl (- V3498 1))))))

(defun difference (V3505 V3506) (cond ((= () V3505) ()) ((cons? V3505) (if (element? (hd V3505) V3506) (difference (tl V3505) V3506) (cons (hd V3505) (difference (tl V3505) V3506)))) (true (simple-error "attempt to find the difference with a non-list
"))))

(defun do (V3507 V3508) V3508)

(defun element? (V3520 V3521) (cond ((= () V3521) false) ((and (cons? V3521) (= V3520 (hd V3521))) true) ((cons? V3521) (element? V3520 (tl V3521))) (true (simple-error "attempt to find an element in a non-list
"))))

(defun empty? (V3524) (cond ((= () V3524) true) (true false)))

(defun fix (V3525 V3526) (shen.fix-help V3525 V3526 (V3525 V3526)))

(defun shen.fix-help (V3532 V3533 V3534) (cond ((= V3533 V3534) V3534) (true (shen.fix-help V3532 V3534 (V3532 V3534)))))

(defun put (V3535 V3536 V3537 V3538) (let N (hash V3535 (limit V3538)) (let Entry (trap-error (<-vector V3538 N) (lambda E ())) (let Change (vector-> V3538 N (shen.change-pointer-value V3535 V3536 V3537 Entry)) V3537))))

(defun unput (V3539 V3540 V3541) (let N (hash V3539 (limit V3541)) (let Entry (trap-error (<-vector V3541 N) (lambda E ())) (let Change (vector-> V3541 N (shen.remove-pointer V3539 V3540 Entry)) V3539))))

(defun shen.remove-pointer (V3552 V3553 V3554) (cond ((= () V3554) ()) ((and (cons? V3554) (and (cons? (hd V3554)) (and (cons? (hd (hd V3554))) (and (cons? (tl (hd (hd V3554)))) (and (= () (tl (tl (hd (hd V3554))))) (and (= V3553 (hd (tl (hd (hd V3554))))) (= V3552 (hd (hd (hd V3554)))))))))) (tl V3554)) ((cons? V3554) (cons (hd V3554) (shen.remove-pointer V3552 V3553 (tl V3554)))) (true (simple-error "implementation error in shen.remove-pointer"))))

(defun shen.change-pointer-value (V3567 V3568 V3569 V3570) (cond ((= () V3570) (cons (cons (cons V3567 (cons V3568 ())) V3569) ())) ((and (cons? V3570) (and (cons? (hd V3570)) (and (cons? (hd (hd V3570))) (and (cons? (tl (hd (hd V3570)))) (and (= () (tl (tl (hd (hd V3570))))) (and (= V3568 (hd (tl (hd (hd V3570))))) (= V3567 (hd (hd (hd V3570)))))))))) (cons (cons (hd (hd V3570)) V3569) (tl V3570))) ((cons? V3570) (cons (hd V3570) (shen.change-pointer-value V3567 V3568 V3569 (tl V3570)))) (true (simple-error "implementation error in shen.change-pointer-value"))))

(defun get (V3571 V3572 V3573) (let N (hash V3571 (limit V3573)) (let Entry (trap-error (<-vector V3573 N) (lambda E (simple-error (shen.app V3571 (cn " has no attributes: " (shen.app V3572 "
" shen.s)) shen.a)))) (let Result (assoc (cons V3571 (cons V3572 ())) Entry) (if (empty? Result) (simple-error (cn "attribute " (shen.app V3572 (cn " not found for " (shen.app V3571 "
" shen.s)) shen.s))) (tl Result))))))

(defun hash (V3574 V3575) (let Hash (shen.mod (shen.hashkey V3574) V3575) (if (= Hash 0) 1 Hash)))

(defun shen.hashkey (V3576) (let Ns (map (lambda X (string->n X)) (explode V3576)) (shen.prodbutzero Ns 1)))

(defun shen.prodbutzero (V3577 V3578) (cond ((= () V3577) V3578) ((and (cons? V3577) (= 0 (hd V3577))) (shen.prodbutzero (tl V3577) V3578)) ((cons? V3577) (if (> V3578 10000000000) (shen.prodbutzero (tl V3577) (+ V3578 (hd V3577))) (shen.prodbutzero (tl V3577) (* V3578 (hd V3577))))) (true (shen.f-error shen.prodbutzero))))

(defun shen.mod (V3579 V3580) (shen.modh V3579 (shen.multiples V3579 (cons V3580 ()))))

(defun shen.multiples (V3585 V3586) (cond ((and (cons? V3586) (> (hd V3586) V3585)) (tl V3586)) ((cons? V3586) (shen.multiples V3585 (cons (* 2 (hd V3586)) V3586))) (true (simple-error "implementation error in shen.multiples"))))

(defun shen.modh (V3593 V3594) (cond ((= 0 V3593) 0) ((= () V3594) V3593) ((and (cons? V3594) (> (hd V3594) V3593)) (if (empty? (tl V3594)) V3593 (shen.modh V3593 (tl V3594)))) ((cons? V3594) (shen.modh (- V3593 (hd V3594)) V3594)) (true (simple-error "implementation error in shen.modh"))))

(defun sum (V3597) (cond ((= () V3597) 0) ((cons? V3597) (+ (hd V3597) (sum (tl V3597)))) (true (simple-error "attempt to sum a non-list
"))))

(defun head (V3602) (cond ((cons? V3602) (hd V3602)) (true (simple-error "head expects a non-empty list
"))))

(defun tail (V3607) (cond ((cons? V3607) (tl V3607)) (true (simple-error "tail expects a non-empty list
"))))

(defun hdstr (V3608) (pos V3608 0))

(defun intersection (V3615 V3616) (cond ((= () V3615) ()) ((cons? V3615) (if (element? (hd V3615) V3616) (cons (hd V3615) (intersection (tl V3615) V3616)) (intersection (tl V3615) V3616))) (true (simple-error "attempt to find the intersection with a non-list
"))))

(defun reverse (V3617) (shen.reverse-help V3617 ()))

(defun shen.reverse-help (V3622 V3623) (cond ((= () V3622) V3623) ((cons? V3622) (shen.reverse-help (tl V3622) (cons (hd V3622) V3623))) (true (simple-error "attempt to reverse a non-list
"))))

(defun union (V3628 V3629) (cond ((= () V3628) V3629) ((cons? V3628) (if (element? (hd V3628) V3629) (union (tl V3628) V3629) (cons (hd V3628) (union (tl V3628) V3629)))) (true (simple-error "attempt to find the union with a non-list
"))))

(defun y-or-n? (V3630) (let Message (pr (shen.proc-nl V3630) (stoutput)) (let Y-or-N (pr " (y/n) " (stoutput)) (let Input (shen.app (read (stinput)) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (pr "please answer y or n
" (stoutput)) (y-or-n? V3630))))))))

(defun not (V3631) (if V3631 false true))

(defun abort () (simple-error ""))

(defun subst (V3637 V3638 V3639) (cond ((= V3638 V3639) V3637) ((cons? V3639) (cons (subst V3637 V3638 (hd V3639)) (subst V3637 V3638 (tl V3639)))) (true V3639)))

(defun explode (V3640) (shen.explode-h (shen.app V3640 "" shen.a)))

(defun shen.explode-h (V3643) (cond ((= "" V3643) ()) ((shen.+string? V3643) (cons (hdstr V3643) (shen.explode-h (tlstr V3643)))) (true (simple-error "implementation error in explode-h"))))

(defun cd (V3644) (set *home-directory* (if (= V3644 "") "" (shen.app V3644 "/" shen.a))))

(defun map (V3645 V3646) (shen.map-h V3645 V3646 ()))

(defun shen.map-h (V3647 V3648 V3649) (cond ((= () V3648) (reverse V3649)) ((cons? V3648) (shen.map-h V3647 (tl V3648) (cons (V3647 (hd V3648)) V3649))) (true (shen.f-error shen.map-h))))

(defun length (V3650) (shen.length-h V3650 0))

(defun shen.length-h (V3655 V3656) (cond ((= () V3655) V3656) (true (shen.length-h (tl V3655) (+ V3656 1)))))

(defun occurrences (V3662 V3663) (cond ((= V3662 V3663) 1) ((cons? V3663) (+ (occurrences V3662 (hd V3663)) (occurrences V3662 (tl V3663)))) (true 0)))

(defun nth (V3668 V3669) (cond ((and (= 1 V3668) (cons? V3669)) (hd V3669)) ((cons? V3669) (nth (- V3668 1) (tl V3669))) (true (simple-error (cn "nth applied to " (shen.app V3668 (cn ", " (shen.app V3669 "
" shen.a)) shen.a))))))

(defun integer? (V3670) (and (number? V3670) (let Abs (shen.abs V3670) (shen.integer-test? Abs (shen.magless Abs 1)))))

(defun shen.abs (V3671) (if (> V3671 0) V3671 (- 0 V3671)))

(defun shen.magless (V3672 V3673) (let Nx2 (* V3673 2) (if (> Nx2 V3672) V3673 (shen.magless V3672 Nx2))))

(defun shen.integer-test? (V3677 V3678) (cond ((= 0 V3677) true) ((> 1 V3677) false) (true (let Abs-N (- V3677 V3678) (if (> 0 Abs-N) (integer? V3677) (shen.integer-test? Abs-N V3678))))))

(defun mapcan (V3685 V3686) (cond ((= () V3686) ()) ((cons? V3686) (append (V3685 (hd V3686)) (mapcan V3685 (tl V3686)))) (true (simple-error "attempt to mapcan over a non-list
"))))

(defun == (V3692 V3693) (cond ((= V3692 V3693) true) (true false)))

(defun bound? (V3694) (and (symbol? V3694) (let Val (trap-error (value V3694) (lambda E shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V3695) (cond ((= "" V3695) ()) (true (cons (string->n (pos V3695 0)) (shen.string->bytes (tlstr V3695))))))

(defun maxinferences (V3696) (set shen.*maxinferences* V3696))

(defun inferences () (value shen.*infs*))

(defun protect (V3697) V3697)

(defun stoutput () (value *stoutput*))

(defun string->symbol (V3698) (let Symbol (intern V3698) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V3698 " to a symbol" shen.s))))))

(defun optimise (V3701) (cond ((= + V3701) (set shen.*optimise* true)) ((= - V3701) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))

(defun os () (value *os*))

(defun language () (value *language*))

(defun version () (value *version*))

(defun port () (value *port*))

(defun porters () (value *porters*))

(defun implementation () (value *implementation*))

(defun release () (value *release*))

(defun package? (V3702) (cond ((= null V3702) true) (true (trap-error (do (external V3702) true) (lambda E false)))))

(defun fn (V3703) (let Assoc (assoc V3703 (value shen.*lambdatable*)) (if (empty? Assoc) (simple-error (shen.app V3703 " has no lambda expansion
" shen.a)) (tl Assoc))))

(defun fail () shen.fail!)(defun enable-type-theory (V3706) (cond ((= + V3706) (set shen.*shen-type-theory-enabled?* true)) ((= - V3706) (set shen.*shen-type-theory-enabled?* false)) (true (simple-error "enable-type-theory expects a + or a -
"))))

(defun tc (V3709) (cond ((= + V3709) (set shen.*tc* true)) ((= - V3709) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun destroy (V3710) (do (shen.unassoc V3710 (value shen.*sigf*)) V3710))

(defun shen.unassoc (V3711 V3712) (let Assoc (assoc V3711 V3712) (let Remove (remove Assoc V3712) (set shen.*sigf* Remove))))

(defun in-package (V3713) (if (package? V3713) (set shen.*package* V3713) (simple-error (cn "package " (shen.app V3713 " does not exist
" shen.a)))))

(defun write-to-file (V3714 V3715) (let Stream (open V3714 out) (let String (if (string? V3715) (shen.app V3715 "

" shen.a) (shen.app V3715 "

" shen.s)) (let Write (pr String Stream) (let Close (close Stream) V3715)))))

(defun fresh () (shen.freshterm (gensym shen.t)))

(defun update-lambda-table (V3716 V3717) (let AssertArity (put V3716 arity V3717 (value *property-vector*)) (let LambdaEntry (shen.lambda-entry V3716) (let Update (set shen.*lambdatable* (cons LambdaEntry (value shen.*lambdatable*))) V3716))))

(defun specialise (V3720 V3721) (cond ((= 0 V3721) (do (set shen.*special* (remove V3720 (value shen.*special*))) (do (set shen.*extraspecial* (remove V3720 (value shen.*extraspecial*))) V3720))) ((= 1 V3721) (do (set shen.*special* (adjoin V3720 (value shen.*special*))) (do (set shen.*extraspecial* (remove V3720 (value shen.*extraspecial*))) V3720))) ((= 2 V3721) (do (set shen.*special* (remove V3720 (value shen.*special*))) (do (set shen.*extraspecial* (adjoin V3720 (value shen.*extraspecial*))) V3720))) (true (simple-error "specialise requires values of 0, 1 or 2
"))))

