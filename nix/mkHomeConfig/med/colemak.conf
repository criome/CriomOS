## Coleremak Ranger mapping
# Basic
map     Q quit!
map     q quit
copymap q ZZ ZQ

map P     reload_cwd
map <C-p> reset
map <C-u> redraw_window
map <C-c> abort
map <esc> change_mode normal
map ~ set viewmode!

map u display_file
map ? help
map W display_log
map w taskview_open
map r shell $SHELL

map :  console
map ;  console
map !  console shell%space
map @  console -p6 shell  %%s
map #  console shell -p%space
map r  console shell%space
map p  chain draw_possible_programs; console open_with%%space
map t  console find%space
map cd console cd%space #TODO decide

# Change the line mode
map Mf linemode filename
map Mi linemode fileinfo
map Mm linemode mtime
map Mp linemode permissions
map Ms linemode sizemtime
map Mt linemode metatitle

# Tagging / Marking
map g       tag_toggle
map lg      tag_remove
map "<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
map v       mark_files all=True toggle=True
map lv      mark_files all=True val=False
map V       toggle_visual_mode
map lV      toggle_visual_mode reverse=True

# For the nostalgics: Midnight Commander bindings
map <F1> help
map <F2> console rename%space
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir%space
map <F8> console delete
map <F10> exit

# In case you work on a keyboard with dvorak layout
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <CR>       move right=1
#map <DELETE>   console delete
map <INSERT>   console touch%space

# VIM-like
copymap <UP>       e
copymap <DOWN>     n
copymap <LEFT>     h
copymap <RIGHT>    i
copymap <HOME>     dd
copymap <END>      D
copymap <PAGEDOWN> <C-T>
copymap <PAGEUP>   <C-B>

map N  move down=0.5  pages=True
map E  move up=0.5    pages=True
copymap N <C-S>
copymap E <C-L>

# Jumping around
map H     history_go -1
map I     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse
map )     jump_non

map dh cd ~
map de cd /etc
map du cd /usr
#map dd cd /dev # Conflicts with <HOME>
map dl cd -r .
map dL cd -r %f
map do cd /opt
map dv cd /var
map dm cd /media
map dM cd /mnt
map ds cd /srv
map dt cd /tmp
map dr cd /
map dR eval fm.cd(ranger.RANGERDIR)
map d/ cd /
map d? cd /usr/share/doc/ranger

# External Programs
map F  edit
map sl shell -p du --max-depth=1 -h --apparent-size
map sL shell -p du --max-depth=1 -h --apparent-size | sort -rh
map jo shell -f echo -n %d/%f     | xsel -i && xsel -o | xsel -i -b
map js shell -f echo -n %d        | xsel -i && xsel -o | xsel -i -b
map jk shell -f echo -n %f        | xsel -i && xsel -o | xsel -i -b
map jr shell -f printf '%%s\n' %s | xsel -i && xsel -o | xsel -i -b

# Filesystem Operations
map =  chmod

map cw console rename%space
map a  rename_append
map A  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map U  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)

map oo paste
map oy paste overwrite=True
map oO paste append=True
map oY paste overwrite=True append=True
map ol paste_symlink relative=False # Kept follow-up
map oL paste_symlink relative=True # Kept follow-up
map ohl paste_hardlink # Kept follow-up
map oht paste_hardlinked_subtree  # Kept follow-up

map sS console delete

map ss cut
map ls uncut
map sa cut mode=add
map sr cut mode=remove # Kept follow-up
map st cut mode=toggle # Kept follow-up

map jj copy
map lj uncut
map ja copy mode=add
map jr copy mode=remove # Kept follow up
map jt copy mode=toggle # Kept follow up

# Temporary workarounds #TODO - ?
#map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
#map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
#map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
#map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
#map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
#map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
#map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
#map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching
map /  console search%space
map k  search_next
map K  search_next forward=False
map ct search_next order=tag # kept follow-up
map cs search_next order=size # kept follow-up
map ci search_next order=mimetype # kept follow-up
map cc search_next order=ctime # kept follow-up
map cm search_next order=mtime # kept follow-up
map ca search_next order=atime # kept follow-up

# Tabs
map <C-k>     tab_new
map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map dg        tab_move 1
map dG        tab_move -1
map dk        tab_new
map dc        tab_close
map lq        tab_restore
map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9

# Sorting
map yr set sort_reverse! # Kept follow-up
map yz set sort=random # Kept follow-up
map ys chain set sort=size;      set sort_reverse=False # Kept follow-up
map yb chain set sort=basename;  set sort_reverse=False # Kept follow-up
map yn chain set sort=natural;   set sort_reverse=False # Kept follow-up
map ym chain set sort=mtime;     set sort_reverse=False # Kept follow-up
map yc chain set sort=ctime;     set sort_reverse=False # Kept follow-up
map ya chain set sort=atime;     set sort_reverse=False # Kept follow-up
map yt chain set sort=type;      set sort_reverse=False # Kept follow-up
map ye chain set sort=extension; set sort_reverse=False # Kept follow-up

map yS chain set sort=size;      set sort_reverse=True # Kept follow-up
map yB chain set sort=basename;  set sort_reverse=True # Kept follow-up
map yN chain set sort=natural;   set sort_reverse=True # Kept follow-up
map yM chain set sort=mtime;     set sort_reverse=True # Kept follow-up
map yC chain set sort=ctime;     set sort_reverse=True # Kept follow-up
map yA chain set sort=atime;     set sort_reverse=True # Kept follow-up
map yT chain set sort=type;      set sort_reverse=True # Kept follow-up
map yE chain set sort=extension; set sort_reverse=True # Kept follow-up

map sc get_cumulative_size

# Settings > Coleremak Unchanged
map zc    set collapse_preview!
map zd    set sort_directories_first!
map zh    set show_hidden!
map <C-h> set show_hidden!
map zI    set flushinput!
map zi    set preview_images!
map zm    set mouse_enabled!
map zp    set preview_files!
map zP    set preview_directories!
map zs    set sort_case_insensitive!
map zu    set autoupdate_cumulative_size!
map zv    set use_preview_script!
map zf    console filter%space
copymap zf zz

# Bookmarks
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
map lm<any> unset_bookmark %any

map m<bg>   draw_bookmarks
copymap m<bg>  um<bg> `<bg> '<bg>

# TODO Start Coleremak UNTOUCHED
# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)
cmap <a-left>   eval fm.ui.console.move_word(left=1)
cmap <a-right>  eval fm.ui.console.move_word(right=1)

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# And of course the emacs way
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# TODO END Coleremak UNTOUCHED
